//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR {

    using SolAR.Datastructure;

public class SolARPluginPipelineManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SolARPluginPipelineManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SolARPluginPipelineManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SolARPluginPipelineManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SolARPipelineManagerPINVOKE.delete_SolARPluginPipelineManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SolARPluginPipelineManager() : this(SolARPipelineManagerPINVOKE.new_SolARPluginPipelineManager(), true) {
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool init(string conf_path, string pipelineUUID) {
    bool ret = SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_init(swigCPtr, conf_path, pipelineUUID);
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CameraParameters getCameraParameters() {
    CameraParameters ret = new CameraParameters(SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_getCameraParameters(swigCPtr), true);
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool start(System.IntPtr textureHandle) {
    bool ret = SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_start(swigCPtr,  textureHandle );
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PIPELINEMANAGER_RETURNCODE udpate(Transform3Df pose) {
    PIPELINEMANAGER_RETURNCODE ret = (PIPELINEMANAGER_RETURNCODE)SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_udpate(swigCPtr, Transform3Df.getCPtr(pose));
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PIPELINEMANAGER_RETURNCODE loadSourceImage(System.IntPtr sourceTextureHandle, int width, int height) {
    PIPELINEMANAGER_RETURNCODE ret = (PIPELINEMANAGER_RETURNCODE)SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_loadSourceImage(swigCPtr,  sourceTextureHandle , width, height);
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void udpatePose(System.IntPtr pose) {
    SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_udpatePose(swigCPtr,  pose );
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool stop() {
    bool ret = SolARPipelineManagerPINVOKE.SolARPluginPipelineManager_stop(swigCPtr);
    if (SolARPipelineManagerPINVOKE.SWIGPendingException.Pending) throw SolARPipelineManagerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
