//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XPCF.Api {

    using XPCF.Core;
    using XPCF.Collection;
    using XPCF.Properties;
    using XPCF.Traits;

public class IComponentManager : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IComponentManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(xpcf_apiPINVOKE.IComponentManager_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IComponentManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          xpcf_apiPINVOKE.delete_IComponentManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void bind(UUID interfaceUUID, UUID instanceUUID, IComponentManager.Scope scope) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_0(swigCPtr, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), (int)scope);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(UUID interfaceUUID, UUID instanceUUID) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_1(swigCPtr, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID));
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(string name, UUID interfaceUUID, UUID instanceUUID, IComponentManager.Scope scope) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_2(swigCPtr, name, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), (int)scope);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(string name, UUID interfaceUUID, UUID instanceUUID) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_3(swigCPtr, name, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID));
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(UUID interfaceUUID, UUID instanceUUID, SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t factoryFunc, IComponentManager.Scope scope) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_4(swigCPtr, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t.getCPtr(factoryFunc), (int)scope);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(UUID interfaceUUID, UUID instanceUUID, SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t factoryFunc) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_5(swigCPtr, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t.getCPtr(factoryFunc));
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(string name, UUID interfaceUUID, UUID instanceUUID, SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t factoryFunc, IComponentManager.Scope scope) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_6(swigCPtr, name, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t.getCPtr(factoryFunc), (int)scope);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bind(string name, UUID interfaceUUID, UUID instanceUUID, SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t factoryFunc) {
    xpcf_apiPINVOKE.IComponentManager_bind__SWIG_7(swigCPtr, name, UUID.getCPtr(interfaceUUID), UUID.getCPtr(instanceUUID), SWIGTYPE_p_std__functionT_boost__shared_ptrT_org__bcom__xpcf__IComponentIntrospect_t_fvoidF_t.getCPtr(factoryFunc));
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    xpcf_apiPINVOKE.IComponentManager_clear(swigCPtr);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual XPCFErrorCode load() {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_load__SWIG_0(swigCPtr);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode load(string libraryFilePath) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_load__SWIG_1(swigCPtr, libraryFilePath);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode load(string folderPathStr, bool bRecurse) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_load__SWIG_2(swigCPtr, folderPathStr, bRecurse);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode loadModuleMetadata(string moduleName, string moduleFilePath) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_loadModuleMetadata(swigCPtr, moduleName, moduleFilePath);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode loadModules(string folderPathStr, bool bRecurse) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_loadModules__SWIG_0(swigCPtr, folderPathStr, bRecurse);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode loadModules(string folderPathStr) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IComponentManager_loadModules__SWIG_1(swigCPtr, folderPathStr);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IComponentIntrospect createComponent(UUID componentUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_createComponent__SWIG_2(swigCPtr, UUID.getCPtr(componentUUID));
    IComponentIntrospect ret = (cPtr == global::System.IntPtr.Zero) ? null : new IComponentIntrospect(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IComponentIntrospect createComponent(string instanceName, UUID componentUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_createComponent__SWIG_3(swigCPtr, instanceName, UUID.getCPtr(componentUUID));
    IComponentIntrospect ret = (cPtr == global::System.IntPtr.Zero) ? null : new IComponentIntrospect(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IComponentIntrospect resolve(UUID interfaceUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_resolve__SWIG_2(swigCPtr, UUID.getCPtr(interfaceUUID));
    IComponentIntrospect ret = (cPtr == global::System.IntPtr.Zero) ? null : new IComponentIntrospect(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IComponentIntrospect resolve(UUID interfaceUUID, string name) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_resolve__SWIG_3(swigCPtr, UUID.getCPtr(interfaceUUID), name);
    IComponentIntrospect ret = (cPtr == global::System.IntPtr.Zero) ? null : new IComponentIntrospect(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ModuleMetadataEnumerable getModulesMetadata() {
    ModuleMetadataEnumerable ret = new ModuleMetadataEnumerable(xpcf_apiPINVOKE.IComponentManager_getModulesMetadata(swigCPtr), false);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ComponentMetadata findComponentMetadata(UUID componentUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_findComponentMetadata(swigCPtr, UUID.getCPtr(componentUUID));
    ComponentMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new ComponentMetadata(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual UUID getModuleUUID(UUID componentUUID) {
    UUID ret = new UUID(xpcf_apiPINVOKE.IComponentManager_getModuleUUID(swigCPtr, UUID.getCPtr(componentUUID)), true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ModuleMetadata findModuleMetadata(UUID moduleUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_findModuleMetadata(swigCPtr, UUID.getCPtr(moduleUUID));
    ModuleMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new ModuleMetadata(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual InterfaceMetadataEnumerable getInterfacesMetadata() {
    InterfaceMetadataEnumerable ret = new InterfaceMetadataEnumerable(xpcf_apiPINVOKE.IComponentManager_getInterfacesMetadata(swigCPtr), false);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual InterfaceMetadata findInterfaceMetadata(UUID interfaceUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IComponentManager_findInterfaceMetadata(swigCPtr, UUID.getCPtr(interfaceUUID));
    InterfaceMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new InterfaceMetadata(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Scope {
    Transient,
    Singleton
  }

}

}
