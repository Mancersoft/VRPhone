//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Solver.Map {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class ITriangulator : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ITriangulator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_solver_mapPINVOKE.ITriangulator_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITriangulator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_solver_mapPINVOKE.delete_ITriangulator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void setCameraParameters(Matrix3x3f intrinsicParams, Vector5f distorsionParams) {
    solar_api_solver_mapPINVOKE.ITriangulator_setCameraParameters(swigCPtr, Matrix3x3f.getCPtr(intrinsicParams), Vector5f.getCPtr(distorsionParams));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double triangulate(Point2DfArray pointsView1, Point2DfArray pointView2, DescriptorMatchVector matches, PairUIntUInt working_views, Transform3Df poseView1, Transform3Df poseView2, CloudPointVector pcloud) {
    double ret = solar_api_solver_mapPINVOKE.ITriangulator_triangulate__SWIG_0(swigCPtr, Point2DfArray.getCPtr(pointsView1), Point2DfArray.getCPtr(pointView2), DescriptorMatchVector.getCPtr(matches), PairUIntUInt.getCPtr(working_views), Transform3Df.getCPtr(poseView1), Transform3Df.getCPtr(poseView2), CloudPointVector.getCPtr(pcloud));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double triangulate(KeypointArray keypointsView1, KeypointArray keypointsView2, DescriptorMatchVector matches, PairUIntUInt working_views, Transform3Df poseView1, Transform3Df poseView2, CloudPointVector pcloud) {
    double ret = solar_api_solver_mapPINVOKE.ITriangulator_triangulate__SWIG_1(swigCPtr, KeypointArray.getCPtr(keypointsView1), KeypointArray.getCPtr(keypointsView2), DescriptorMatchVector.getCPtr(matches), PairUIntUInt.getCPtr(working_views), Transform3Df.getCPtr(poseView1), Transform3Df.getCPtr(poseView2), CloudPointVector.getCPtr(pcloud));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double triangulate(KeypointArray keypointsView1, KeypointArray keypointsView2, DescriptorBuffer descriptor1, DescriptorBuffer descriptor2, DescriptorMatchVector matches, PairUIntUInt working_views, Transform3Df poseView1, Transform3Df poseView2, CloudPointVector pcloud) {
    double ret = solar_api_solver_mapPINVOKE.ITriangulator_triangulate__SWIG_2(swigCPtr, KeypointArray.getCPtr(keypointsView1), KeypointArray.getCPtr(keypointsView2), DescriptorBuffer.getCPtr(descriptor1), DescriptorBuffer.getCPtr(descriptor2), DescriptorMatchVector.getCPtr(matches), PairUIntUInt.getCPtr(working_views), Transform3Df.getCPtr(poseView1), Transform3Df.getCPtr(poseView2), CloudPointVector.getCPtr(pcloud));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double triangulate(Keyframe curKeyframe, DescriptorMatchVector matches, CloudPointVector pcloud) {
    double ret = solar_api_solver_mapPINVOKE.ITriangulator_triangulate__SWIG_3(swigCPtr, Keyframe.getCPtr(curKeyframe), DescriptorMatchVector.getCPtr(matches), CloudPointVector.getCPtr(pcloud));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
