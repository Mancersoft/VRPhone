//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Solver.Pose {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class I2D3DCorrespondencesFinder : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal I2D3DCorrespondencesFinder(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_solver_posePINVOKE.I2D3DCorrespondencesFinder_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(I2D3DCorrespondencesFinder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_solver_posePINVOKE.delete_I2D3DCorrespondencesFinder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual FrameworkReturnCode find(Keyframe referenceKeyframe, Frame currentFrame, DescriptorMatchVector current_matches, Map worldMap, Point3DfArray shared_3dpoint, Point2DfArray shared_2dpoint, DescriptorMatchVector found_matches, DescriptorMatchVector remaining_matches) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_solver_posePINVOKE.I2D3DCorrespondencesFinder_find__SWIG_0(swigCPtr, Keyframe.getCPtr(referenceKeyframe), Frame.getCPtr(currentFrame), DescriptorMatchVector.getCPtr(current_matches), Map.getCPtr(worldMap), Point3DfArray.getCPtr(shared_3dpoint), Point2DfArray.getCPtr(shared_2dpoint), DescriptorMatchVector.getCPtr(found_matches), DescriptorMatchVector.getCPtr(remaining_matches));
    if (solar_api_solver_posePINVOKE.SWIGPendingException.Pending) throw solar_api_solver_posePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FrameworkReturnCode find(Frame lastFrame, Frame currentFrame, DescriptorMatchVector current_matches, Map worldMap, Point3DfArray shared_3dpoint, Point2DfArray shared_2dpoint, DescriptorMatchVector found_matches, DescriptorMatchVector remaining_matches) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_solver_posePINVOKE.I2D3DCorrespondencesFinder_find__SWIG_1(swigCPtr, Frame.getCPtr(lastFrame), Frame.getCPtr(currentFrame), DescriptorMatchVector.getCPtr(current_matches), Map.getCPtr(worldMap), Point3DfArray.getCPtr(shared_3dpoint), Point2DfArray.getCPtr(shared_2dpoint), DescriptorMatchVector.getCPtr(found_matches), DescriptorMatchVector.getCPtr(remaining_matches));
    if (solar_api_solver_posePINVOKE.SWIGPendingException.Pending) throw solar_api_solver_posePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
