//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Solver.Map {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class IKeyframeSelector : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IKeyframeSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_solver_mapPINVOKE.IKeyframeSelector_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKeyframeSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_solver_mapPINVOKE.delete_IKeyframeSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual bool select(Frame frame, DescriptorMatchVector matches) {
    bool ret = solar_api_solver_mapPINVOKE.IKeyframeSelector_select__SWIG_0(swigCPtr, Frame.getCPtr(frame), DescriptorMatchVector.getCPtr(matches));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool select(Frame frame) {
    bool ret = solar_api_solver_mapPINVOKE.IKeyframeSelector_select__SWIG_1(swigCPtr, Frame.getCPtr(frame));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool select(Frame frame, SWIGTYPE_p_std__functionT_bool_fboost__shared_ptrT_SolAR__datastructure__Frame_t_const_RF_t func) {
    bool ret = solar_api_solver_mapPINVOKE.IKeyframeSelector_select__SWIG_2(swigCPtr, Frame.getCPtr(frame), SWIGTYPE_p_std__functionT_bool_fboost__shared_ptrT_SolAR__datastructure__Frame_t_const_RF_t.getCPtr(func));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
