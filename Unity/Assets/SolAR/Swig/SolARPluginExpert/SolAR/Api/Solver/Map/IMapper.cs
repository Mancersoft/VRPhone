//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Solver.Map {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class IMapper : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IMapper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_solver_mapPINVOKE.IMapper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IMapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_solver_mapPINVOKE.delete_IMapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual FrameworkReturnCode update(Map map, Keyframe newKeyframe, CloudPointVector newCloud, DescriptorMatchVector newPointsMatches, DescriptorMatchVector existingPointsMatches) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_solver_mapPINVOKE.IMapper_update__SWIG_0(swigCPtr, Map.getCPtr(map), Keyframe.getCPtr(newKeyframe), CloudPointVector.getCPtr(newCloud), DescriptorMatchVector.getCPtr(newPointsMatches), DescriptorMatchVector.getCPtr(existingPointsMatches));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FrameworkReturnCode update(Map map, Keyframe newKeyframe, CloudPointVector newCloud, SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_int_int_unsigned_int_t_t newPointMatches) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_solver_mapPINVOKE.IMapper_update__SWIG_1(swigCPtr, Map.getCPtr(map), Keyframe.getCPtr(newKeyframe), CloudPointVector.getCPtr(newCloud), SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_int_int_unsigned_int_t_t.getCPtr(newPointMatches));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FrameworkReturnCode update(Transform3DfList correctedPoses, CloudPointVector correctedMap) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_solver_mapPINVOKE.IMapper_update__SWIG_2(swigCPtr, Transform3DfList.getCPtr(correctedPoses), CloudPointVector.getCPtr(correctedMap));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual KeyframeList getKeyframes() {
    KeyframeList ret = new KeyframeList(solar_api_solver_mapPINVOKE.IMapper_getKeyframes(swigCPtr), false);
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Keyframe getKeyframe(int index) {
    global::System.IntPtr cPtr = solar_api_solver_mapPINVOKE.IMapper_getKeyframe(swigCPtr, index);
    Keyframe ret = (cPtr == global::System.IntPtr.Zero) ? null : new Keyframe(cPtr, true);
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void getLocalMap(Keyframe refKF, CloudPointVector localCloudPoints) {
    solar_api_solver_mapPINVOKE.IMapper_getLocalMap(swigCPtr, Keyframe.getCPtr(refKF), CloudPointVector.getCPtr(localCloudPoints));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Map getGlobalMap() {
    global::System.IntPtr cPtr = solar_api_solver_mapPINVOKE.IMapper_getGlobalMap(swigCPtr);
    Map ret = (cPtr == global::System.IntPtr.Zero) ? null : new Map(cPtr, true);
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void getLocalMapIndex(Keyframe refKF, UIntVector idxLocalCloudPoints) {
    solar_api_solver_mapPINVOKE.IMapper_getLocalMapIndex(swigCPtr, Keyframe.getCPtr(refKF), UIntVector.getCPtr(idxLocalCloudPoints));
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateNeighborConnections(Keyframe newKeyframe, int minDis) {
    solar_api_solver_mapPINVOKE.IMapper_updateNeighborConnections(swigCPtr, Keyframe.getCPtr(newKeyframe), minDis);
    if (solar_api_solver_mapPINVOKE.SWIGPendingException.Pending) throw solar_api_solver_mapPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
