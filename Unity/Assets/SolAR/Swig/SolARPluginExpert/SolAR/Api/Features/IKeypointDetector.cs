//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Features {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class IKeypointDetector : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IKeypointDetector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_featuresPINVOKE.IKeypointDetector_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKeypointDetector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_featuresPINVOKE.delete_IKeypointDetector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void setType(IKeypointDetector.KeypointDetectorType type) {
    solar_api_featuresPINVOKE.IKeypointDetector_setType(swigCPtr, (int)type);
    if (solar_api_featuresPINVOKE.SWIGPendingException.Pending) throw solar_api_featuresPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IKeypointDetector.KeypointDetectorType getType() {
    IKeypointDetector.KeypointDetectorType ret = (IKeypointDetector.KeypointDetectorType)solar_api_featuresPINVOKE.IKeypointDetector_getType(swigCPtr);
    if (solar_api_featuresPINVOKE.SWIGPendingException.Pending) throw solar_api_featuresPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void detect(Image image, KeypointArray keypoints) {
    solar_api_featuresPINVOKE.IKeypointDetector_detect(swigCPtr, Image.getCPtr(image), KeypointArray.getCPtr(keypoints));
    if (solar_api_featuresPINVOKE.SWIGPendingException.Pending) throw solar_api_featuresPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum KeypointDetectorType {
    SURF,
    ORB,
    SIFT,
    DAISY,
    LATCH,
    AKAZE,
    AKAZE2,
    AKAZEUP,
    BRISK,
    BRIEF,
    FEATURE_TO_TRACK
  }

}

}
