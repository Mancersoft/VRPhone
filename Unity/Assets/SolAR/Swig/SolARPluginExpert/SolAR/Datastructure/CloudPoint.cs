//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Datastructure {

    //using XPCF.Core;
    using SolAR.Core;

public class CloudPoint : Point3Df {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal CloudPoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_datastructurePINVOKE.CloudPoint_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CloudPoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_datastructurePINVOKE.delete_CloudPoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CloudPoint() : this(solar_datastructurePINVOKE.new_CloudPoint__SWIG_0(), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public CloudPoint(float x, float y, float z, float r, float g, float b, double reproj_error, MapIntInt visibility) : this(solar_datastructurePINVOKE.new_CloudPoint__SWIG_1(x, y, z, r, g, b, reproj_error, MapIntInt.getCPtr(visibility)), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public CloudPoint(float x, float y, float z, float r, float g, float b, double reproj_error, MapIntInt visibility, SWIGTYPE_p_boost__shared_ptrT_DescriptorBuffer_t descriptor) : this(solar_datastructurePINVOKE.new_CloudPoint__SWIG_2(x, y, z, r, g, b, reproj_error, MapIntInt.getCPtr(visibility), SWIGTYPE_p_boost__shared_ptrT_DescriptorBuffer_t.getCPtr(descriptor)), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getR() {
    float ret = solar_datastructurePINVOKE.CloudPoint_getR(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getG() {
    float ret = solar_datastructurePINVOKE.CloudPoint_getG(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getB() {
    float ret = solar_datastructurePINVOKE.CloudPoint_getB(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getReprojError() {
    double ret = solar_datastructurePINVOKE.CloudPoint_getReprojError(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapIntInt getVisibility() {
    MapIntInt ret = new MapIntInt(solar_datastructurePINVOKE.CloudPoint_getVisibility(swigCPtr), false);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void visibilityAddKeypoint(uint keyframe_id, uint keypoint_id) {
    solar_datastructurePINVOKE.CloudPoint_visibilityAddKeypoint(swigCPtr, keyframe_id, keypoint_id);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_boost__shared_ptrT_DescriptorBuffer_t getDescriptor() {
    SWIGTYPE_p_boost__shared_ptrT_DescriptorBuffer_t ret = new SWIGTYPE_p_boost__shared_ptrT_DescriptorBuffer_t(solar_datastructurePINVOKE.CloudPoint_getDescriptor(swigCPtr), true);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
