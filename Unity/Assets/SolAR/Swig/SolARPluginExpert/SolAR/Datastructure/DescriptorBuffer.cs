//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Datastructure {

    //using XPCF.Core;
    using SolAR.Core;

public class DescriptorBuffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal DescriptorBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DescriptorBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DescriptorBuffer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          solar_datastructurePINVOKE.delete_DescriptorBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DescriptorBuffer(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_unsigned_char_t desc) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_0(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_unsigned_char_t.getCPtr(desc)), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_float_t desc) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_1(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_float_t.getCPtr(desc)), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(DescriptorView desc) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_2(DescriptorView.getCPtr(desc)), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(DescriptorType descriptor_type, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_3((int)descriptor_type, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(global::System.IntPtr descriptorData, DescriptorType descriptor_type, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_4(descriptorData, (int)descriptor_type, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(global::System.IntPtr descriptorData, DescriptorType descriptor_type, DescriptorDataType data_type, uint nb_elements, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_5(descriptorData, (int)descriptor_type, (int)data_type, nb_elements, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(DescriptorType descriptor_type, DescriptorDataType data_type, uint nb_elements, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_6((int)descriptor_type, (int)data_type, nb_elements, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer() : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_7(), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbDescriptors() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getNbDescriptors(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DescriptorType getDescriptorType() {
    DescriptorType ret = (DescriptorType)solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorType(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbElements() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getNbElements(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DescriptorDataType getDescriptorDataType() {
    DescriptorDataType ret = (DescriptorDataType)solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorDataType(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDescriptorByteSize() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorByteSize(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void append(DescriptorView descriptor) {
    solar_datastructurePINVOKE.DescriptorBuffer_append__SWIG_0(swigCPtr, DescriptorView.getCPtr(descriptor));
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_unsigned_char_t descriptor) {
    solar_datastructurePINVOKE.DescriptorBuffer_append__SWIG_1(swigCPtr, SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_unsigned_char_t.getCPtr(descriptor));
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_float_t descriptor) {
    solar_datastructurePINVOKE.DescriptorBuffer_append__SWIG_2(swigCPtr, SWIGTYPE_p_SolAR__datastructure__DescriptorViewTemplateT_float_t.getCPtr(descriptor));
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorView getDescriptor(uint index) {
    DescriptorView ret = new DescriptorView(solar_datastructurePINVOKE.DescriptorBuffer_getDescriptor(swigCPtr, index), true);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr data() {
    global::System.IntPtr ret = solar_datastructurePINVOKE.DescriptorBuffer_data(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
